Sistem nedir?
Sistem bir input alıp onu işleyip geri bir output veren her şeydir.

Sistem Tasarımı
Ne gelecek ? Nasıl gelecek ? Ne üreteceğim ?

Sistem tasarımı neden önemlidir ?
Sistem tasarımı öneminden dolayı önemlidir yani hiç bir işe
 planlamadan başlamamalıyız.

 Sistem tasarımı 3 başlık altında incelenir:
 * Mimari tasarım : Modeller nelerdir? İnputlar nelerdir ? Davranışlar nelerdir vs
 * Mantıksal tasarım : işleyecek businesslar nasıl ? Business flowları
 * Fiziksel tasarım : datayı nasıl sunacağız ? sunucuları nerede tutacağız ?

Database Selection:
ACID principle - Base principle
ACID principle :
** Bir veritabanının güvenilir, tutarlı ve sağlam bir şekilde çalışmasını
sağlayan temel özelliklerdir.
** ACID(Atomicity - Consistency - Isolation - Durability):

*Atomicity:
Bir transaction ya tamamen gerçekleşmeli aksi durumda hiç gerçekleşmemelidir.
Transaction process edilirken bir hata durumunda bütün değişiklikler geri alınır.
Örneğin bir para transferi yapılırken, para bir hesaptan çekilip diğer hesaba yatırılırken
bir hata oluşması durumunda bütün değişikler geri alınır.
(Hesaptan para çekilip diğer hesaba para yatırılması tek bir transaction içinde değerlendirilir.)

*Consistency:
 Veritabanında değişiklik yapılırken tutarlı durum korunmalıdır. Yani foreign key constraints, unique keys c. vs
 yeni durumda da korunmalıdır yani tutarlı olmalıdır.

* Isolation:
Birden fazla transaction aynı anda gerçekleştiğinde hepsi birbirinden izole edilmiş ve bağımsız
gibi davranmalıdır. Bu durum, veri tutarlığını ve işlemlerin birbirlerini etkilememesini korur.
Isolation level : serializable, repeatable read, read committed, read uncommitted

*Durability:
Bir transaction başarılı bir şekilde tamamlandığında ne olursa olsun kalıcıdır.
Yani sistemin çökmesi durumunda veya tekrardan başlatılması durumunda başarı ile sonuçlanmış
transactionlar kaybolamaz. Örneğin bir para yatırma işlemi başarılı oldu ve veritabanına kaydettik.
Sistemi tekrardan başlatsakta bu ödeme işlemi tamamlanmıştır ve kaybolamaz. Bu örneğin diske
vs yazılarak sağlanabilir.

BASE Principle:
** Genellikle dağıtık sistemler ve NoSql veritabanlarında kullanılır. ACID prensiplerindeki tutarlılık ilkelerinden
ödün vererek yüksek performanslı çalışmayı hedefler. ACID bir transaction sync bir şekilde olduğunu teyit ederken
BASE principle bunu garanti etmez.
*BASE(Basically Available - Soft State - Eventual Consistency)

Basically Available: TODO

Soft State:
Bir kullanıcının kaydettiği verinin son halini diğer kullanıcı görmek zorunda değildir. Bu bir sorun teşkil etmemelidir.
Yani veritabanı sürekli olarak güncellenir ve her an tutarlı olması gerekmez. Yani veri değişikliği hemen tüm sisteme
yansıtılmak zorunda değildir.
Eventual Consistency:
Soft statede hemen yansıtılmayan değişiklik bir süre sonra yansıtılır ve veritabanı eninde sonunda tutarlı bir hale gelecektir.

Özetle ACID kritik işlemler için kullanılır genellikle veri yüzde yüz "tutarlı" olmak zorundadır. BASE örneğin twitter like gibi örnekler
tutarlı olmasına gerek yoktur ama avaliable" olmalıdır data.

BASE'e örnek olarak twitterda like sayılarını görüntülerken dbden yanıt almak zorundayım(Basically Avaliable)
fakat bu sayı doğru olmayabilir gerçek rakam 100 ise 98 görebilirim(Soft State),
fakat aradan belli bir zaman geçtikten sonra 100 rakamı görürüm.(Eventually Consistency)

Horizontal Scaling - Vertical Scaling

Bir veritabanı sunucusuna sahip olduğumuzu düşünelim. Bu sunucunun throughputu
arttırmak istedik bir sebepten dolayı. Burada iki yöntem vardır. İlki sunucunun
sahip olduğunu sistem özelliklerini arttırmak gpu ram vs. Bu vertical scalingtir.
Bunu tercih etmedik dedik ki sistem özelliklerini yükseltmek yerine biz bu sunucuyu
çoğullayalım çünkü sistem özelliklerini yükseltmek bir noktadan sonra hem maliyetli
hemde bir sınırı var sonuçta nereye kadar yükselteceğiz :) Bu sunucuyu çoğullamak ise
horizontal scalingtir.

Horizontal scaling maliyeti vertical scalingin bir noktasından sonra aslında düşürmeye başlar
fakat burada da complexity artar ve datayı sync bir şekilde aynı zamanda yükü nasıl dağıtacağımız
sorusu karşımıza çıkar. Burada da "Load Balancer" çözümleri karşımıza çıkar.

TODO Load balancer definitions and algoritms

Bottle Neck ???

TODO Single point of failure def
İdeal dünyada sistem tasarımda sistem hiç bir zaman tek bir endpointe bağımlı olmamalı
yani load balancer gibi yapılarda sistem tek bir noktaya bağımlı hale gelir ve load
balancerın down olduğu durumda sistem down olmuş olur.

TODO QUESTİON peki load balancerı nasıl yüzde yüz ayakta tutabilirim
Orchestration tool like Kubernates Openshift
Sistem ayakta değilse liveness readiness gibi yapılarla restart edilmeli
belli bir threshold sonrasında yeni bir build alınıp farklı node'a yönlendirme yapılabilir

database replication

img pngde masterdan slave veritabanlarına datayı sync etme şekilleri vardır.
TODO sync çözümleri
Master Slave img pngde
Peer to Peer img1 pngde async data
master to master sync data Bankacılık sistemleri

More performance --> Cache mechanism

*Cache Types
- In memory cache
- Distributed Cache
- Client side caching --> TODO

img_2de cache strategies görselleri mevcut TODO

Cache aside ve write through cachei bir performans arttırıcı olarak kullanılır.

Cacheleyeceğimiz datanın iki özelliği olması gerekir:
* Çok sık erişiliyor olması
* Çok sık güncellenmiyor olmalı

Caching Strategies:
* On-demand : Verilerinin talep edildiği an cachelenmesidir.
* Prepopulation : Uygulama ayağa kalkar kalkmaz veriler cachelenir.

Cache Ömrü:
Absolute Time : Verilen süre dolduğunda veri cacheden silinir.
Sliding Time : Verilen süre içerisinde veriye istek geldiğinde cache süresi
sliding time kadar uzamış olur.
(*** Burada önemli bir detay var sliding time verildiğinde absolute timeda verilmeli
yoksa sürekli eski veriye erişme ihtimalimiz yüksek olur.)

In Memory Caching :

In memory cache uygulamanın bulunduğu sunucuda ilgili verilerin sunucunun ram
belleğinde tutulmasıdır. Cache boyutu sunucunun ram özellikleriyle ile doğru orantılıdır.
Uygulama tek bir instance ise sorunsuz şekilde kullanılabilir fakat uygulama da
birden fazla instance çalışıyorsa ve bir load balancer yönlendirme yapıyorsa
kullanıcı her istek yaptığında farklı sunucuya gidebileceğinden ve farklı cachelere gideceğinden
dolayı farklı veri ile karşılaşabilir. Bu sorunu load balancer üzerinde
"Sticky Session" özelliği ile istek yapan kullanıcının sürekli aynı
instance'a yönlendirilmesini sağlayabiliriz fakat uygulama birden fazla sunucu
çalışıyorsa Distributed Cache daha doğrudur.



--> CDN (Content Delivery Network)
CDNler web içeriğini(HTML, JS, CSS, images, videos vs) gibi parçaları coğrafi
olarak dağıtılmış sunucularda saklayarak internet trafiğini optimize eder ve
yükleme sürelerini kısaltır. Örnek olarak ben türk sunucusunda bulunan A sitesine giriyorum ve 40 ms te
bağlanabiliyorum. Fakat Amerikada yaşayan biri bu A sitesine 200 ms de bağlanabiliyor.
Çünkü sunucu türkiyede ve amerikadaki adamda buraya bağlanmak zorunda.
CDN kullanıldığında ise web içeriğini hem amerika sunucusunda hemde türkiyede tuttuğunu düşünelim.
Amerikadaki adam amerika sunucusuna türkiyedeki adam türkiye sunucusuna bağlanıyor.
Amerikadaki adamın kendi ülkesinde sunucuya bağlandığından dolayı bağlanma hızı artıyor.
CDN'i CDN sağlayıcıları üzerinden kurabiliriz.Kullanıcı web sitesine erişmek istediğinde
dns sorgusu yapılır ve en yakın sunucuya yönlendirilir.
Fakat avantajı olduğu kadar dezavantajları da vardır.
* Maliyet
* Cachelenme sorunları : eski ve yeni içerik sync olmayabilir.
* Teknik olarak karmaşık bir yapıdır.
* Servis sağlayıcısına bağımlı hale geliriz



* Session
Kullanıcı adı ve şifreyle giriş yaptığımızı düşünelim. Her yeni istekte
bu kullanıcı adı şifreyi sunmak yerine "Session" bilgisini sunmamız yeterli olur.

- Stateful --> veriler in memory tutulur. Bir podun tuttuğu bilgiyi diğer pod ulaşamaz. Load Balancer üzerinde
sticky session tanımı vs ile çözüm sağlanabilir. "Single of Failure"
- Stateless --> veriler tüm nodeların ortak olduğu bir cache veya db üzerinde tutulur,
böylelikle bütün podlar aynı veriye ulaşabilir.
TODO pros cons


2:20 saat


